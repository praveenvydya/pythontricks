from string import Template
SECRET = '789789ewr87234'
class Error:
    def __init__(self):
        self.name = 'praveen'

err = Error()
hacker_input_string = '{error.__init__.__globals__[SECRET]}'
print(hacker_input_string.format(error=err))

#hypothetical attacker an access secret key by accessing __global__ dictionary from the formated sting.
# Template Strings close this attack and makes them safe choice if you are formating strings generated by user input.

t = Template(hacker_input_string).substitute(error=err)
print(t)

## ERROR CODE raise ValueError('Invalid placeholder in string: line %d, col %d' %
hacker_input_string = '${error.__init__.__globals__[SECRET]}'
t = Template(hacker_input_string).substitute(error=err)
print(t)

#####################################################################################################
##### If your format strings are user-suplied . use Template Strings to avoid security issues.   ####
##### Otherwise user literal String interpolation if you are on python 3.6++, and new style .    ####
#####################################################################################################

